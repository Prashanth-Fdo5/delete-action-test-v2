name: Notify Zoho Cliq on Tag or Production Deployment

on:
  push:
    tags:
      - '*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  notify-and-deploy:
    runs-on: ubuntu-latest
    continue-on-error: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract common environment info
        run: |
          echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "DEPLOYED_BY=${{ github.actor }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "WORKFLOW_RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

      - name: Notify Staging Tag Push
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          CLIQ_WEBHOOK_URL: https://cliq.zoho.com/company/779974041/api/v2/channelsbyname/testingchannel/message?zapikey=1001.2b828b4afe6ae4aa449846b35439e65f.cc8102b654e1beb905a79042add90969

        run: |
          cat <<EOF > payload.json
          {
            "text": "üöÄ Staging Release Notification",
            "bot": {
              "name": "Release Bot",
              "image": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            },
            "card": {
              "title": "New Tag Release",
              "theme": "modern-inline"
            },
            "slides": [
              {
                "type": "label",
                "title": "Release Details",
                "data": [
                  { "Tag": "${TAG_NAME}" },
                  { "Author": "${DEPLOYED_BY}" },
                  { "Repository": "${GITHUB_REPOSITORY}" },
                  { "View on GitHub": "[üîó View Tag](https://github.com/${GITHUB_REPOSITORY}/releases/tag/${TAG_NAME})" }
                ]
              }
            ]
          }
          EOF
          curl -X POST "$CLIQ_WEBHOOK_URL" -H "Content-Type: application/json" -d @payload.json
          rm payload.json

      - name: Notify Production Deployment
        if: github.event_name == 'release' && github.event.action == 'published'
        env:
         CLIQ_WEBHOOK_URL: https://cliq.zoho.com/company/779974041/api/v2/channelsbyname/testingchannel/message?zapikey=1001.2b828b4afe6ae4aa449846b35439e65f.cc8102b654e1beb905a79042add90969
        run: |
          cat <<EOF > payload.json
          {
            "text": "üéâ Production Deployment Triggered!",
            "bot": {
              "name": "Production Deploy Bot",
              "image": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            },
            "card": {
              "title": "New Production Deployment Release",
              "theme": "modern-inline"
            },
            "slides": [
              {
                "type": "label",
                "title": "Deployment Details",
                "data": [
                  { "Environment": "üî¥ Production" },
                  { "Release": "${{ github.event.release.tag_name }}" },
                  { "Release Name": "${{ github.event.release.name }}" },
                  { "Published By": "${{ github.event.release.author.login }}" },
                  { "Repository": "${GITHUB_REPOSITORY}" },
                  { "Deployment Time": "${DEPLOYMENT_TIME}" },
                  { "View Release": "[üîó View Release](${{ github.event.release.html_url }})" }
                ]
              }
            ]
          }
          EOF
          curl -X POST "$CLIQ_WEBHOOK_URL" -H "Content-Type: application/json" -d @payload.json
          rm payload.json

      - name: Wait for downstream dispatch workflow
        id: wait-downstream
        run: |
          echo "üîÑ Waiting for downstream workflow to finish..."

          TARGET_REPO="Prashanth-Fdo5/delete-action-test"
          TARGET_WORKFLOW_NAME="deploy-staging.yml"  # adjust as needed
          GITHUB_API="https://api.github.com"

          ATTEMPTS=0
          MAX_ATTEMPTS=30
          SLEEP=20

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            # Get latest workflow runs in the target repo
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.SECRETS_TAG_TRIGGER }}" \
              "$GITHUB_API/repos/$TARGET_REPO/actions/workflows/$TARGET_WORKFLOW_NAME/runs?per_page=1")

            STATUS=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].status')
            CONCLUSION=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].conclusion')
            HEAD_SHA=$(echo "$RESPONSE" | jq -r '.workflow_runs[0].head_sha')

            echo "Downstream status=$STATUS, conclusion=$CONCLUSION, sha=$HEAD_SHA"

            # match the same commit
            if [ "$HEAD_SHA" != "${GITHUB_SHA}" ]; then
              echo "Downstream workflow has different SHA, waiting..."
              sleep $SLEEP
              ATTEMPTS=$((ATTEMPTS+1))
              continue
            fi

            if [ "$STATUS" == "completed" ]; then
              echo "Downstream workflow finished with: $CONCLUSION"
              echo "conclusion=$CONCLUSION" >> $GITHUB_OUTPUT
              break
            fi

            sleep $SLEEP
            ATTEMPTS=$((ATTEMPTS+1))
          done

          if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
            echo "Downstream workflow timed out."
            echo "conclusion=timed_out" >> $GITHUB_OUTPUT
          fi

     
      - name: Notify Final Deployment Status
        if: always()
        env:
          CLIQ_WEBHOOK_URL: https://cliq.zoho.com/company/779974041/api/v2/channelsbyname/testingchannel/message?zapikey=1001.2b828b4afe6ae4aa449846b35439e65f.cc8102b654e1beb905a79042add90969
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Looking up PR that merged this commit..."
          PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/commits/${GITHUB_SHA}/pulls" \
            -H "Accept: application/vnd.github.groot-preview+json")

          echo "PR_INFO=$PR_INFO"

          # Defensive jq to check array type
          if echo "$PR_INFO" | jq -e 'type == "array"' >/dev/null; then
            MERGED_BY=$(echo "$PR_INFO" | jq -r '.[0].merged_by.login // "N/A"')
          else
            MERGED_BY="N/A"
          fi

          echo "MERGED_BY=$MERGED_BY"

          if [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ Deployment completed successfully"
          else
            STATUS="‚ùå Deployment failed"
          fi

          cat <<EOF > payload.json
          {
            "text": "$STATUS",
            "bot": {
              "name": "Deployment Status Bot",
              "image": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            },
            "card": {
              "title": "Deployment Status Report",
              "theme": "modern-inline"
            },
            "slides": [
              {
                "type": "label",
                "title": "Details",
                "data": [
                  { "Status": "$STATUS" },
                  { "Tag": "${TAG_NAME}" },
                  { "Deployed By": "${DEPLOYED_BY}" },
                  { "PR Merged By": "$MERGED_BY" },
                  { "Repository": "${GITHUB_REPOSITORY}" },
                  { "Workflow": "${GITHUB_WORKFLOW}" },
                  { "Run": "https://github.com/${GITHUB_REPOSITORY}/actions/runs/${WORKFLOW_RUN_ID}" }
                ]
              }
            ]
          }
          EOF

          curl -X POST "$CLIQ_WEBHOOK_URL" -H "Content-Type: application/json" -d @payload.json
          rm payload.json
