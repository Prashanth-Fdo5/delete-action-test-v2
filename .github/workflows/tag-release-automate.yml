name: Auto Tag Release

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: 'Tag prefix (e.g., crm, hrm, review)'
        required: true
        type: choice
        options:
          - crm
          - hrm
          - review

jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: auto-tag-${{ github.event.inputs.prefix }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Switch to main and pull latest
        run: |
          git checkout main
          git pull origin main

      - name: Get next available tag for prefix (with dash)
        id: version
        env:
          PREFIX: ${{ github.event.inputs.prefix }}
        run: |
          echo "üîç Prefix is: $PREFIX"

          # Get tags that match pattern like crm-v0.01.01
          TAGS=$(git tag --sort=-v:refname | grep "^${PREFIX}-v")

          if [ -z "$TAGS" ]; then
            NEW_VERSION="${PREFIX}-v0.00.01"
            LAST_TAG=""
          else
            LAST_TAG=$(echo "$TAGS" | head -n 1)
            echo "Last tag: $LAST_TAG"

            VERSION=${LAST_TAG#${PREFIX}-v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

            MAJOR_NUM=$((10#$MAJOR))
            MINOR_NUM=$((10#$MINOR))
            PATCH_NUM=$((10#$PATCH + 1))

            while : ; do
              NEW_PATCH=$(printf "%02d" $PATCH_NUM)
              NEW_VERSION="${PREFIX}-v${MAJOR_NUM}.${MINOR_NUM}.${NEW_PATCH}"
              if git tag | grep -q "^$NEW_VERSION$"; then
                PATCH_NUM=$((PATCH_NUM + 1))
              else
                break
              fi
            done
          fi

          echo "‚úÖ New tag will be: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "latest_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "prefix=$PREFIX" >> $GITHUB_ENV

      - name: Create and push new tag
        run: |
          git tag "${{ steps.version.outputs.new_version }}" -m "${{ steps.version.outputs.new_version }}"
          git push origin "${{ steps.version.outputs.new_version }}"
          echo "‚úÖ Pushed new tag: ${{ steps.version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ## Changes in ${{ steps.version.outputs.new_version }}
            Auto-generated release based on prefix `${{ env.prefix }}`.

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.latest_tag }}...${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "üéâ Release Summary:"
          echo "- Prefix: ${{ env.prefix }}"
          echo "- Previous version: ${{ steps.version.outputs.latest_tag }}"
          echo "- New version: ${{ steps.version.outputs.new_version }}"
          echo "- Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }}"
