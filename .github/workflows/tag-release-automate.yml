name: Auto Tag Release

on:
  workflow_dispatch:
    inputs:
      prefix:
        description: 'Tag prefix (e.g., crm, hrm, review)'
        required: true
        default: 'crm'
        type: choice
        options:
          - crm
          - hrm
          - review

jobs:
  create-tag:
    runs-on: ubuntu-latest

    permissions:
       contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Switch to main and pull latest
      run: |
        git checkout main
        git pull origin main
    - name: Get latest tag for prefix and calculate next version
      id: version
      env:
        PREFIX: ${{ github.event.inputs.prefix }}
      run: |
        echo "üîç Prefix is: $PREFIX"
        # Get latest tag with prefix (e.g., crm-v1.1.01)
        LATEST_TAG=$(git tag --sort=-v:refname | grep "^${PREFIX}v" | head -n 1 || echo "${PREFIX}-v0.0.00")
        echo "Latest tag: $LATEST_TAG"
        VERSION=${LATEST_TAG#${PREFIX}v}
        IFS='.' read -r MAJOR MINOR <<< "$VERSION"
        MAJOR_NUM=$((10#$MAJOR))
        MINOR_NUM=$((10#$MINOR))
        if [ $MINOR_NUM -ge 99 ]; then
          MAJOR_NUM=$((MAJOR_NUM + 1))
          MINOR_NUM=1
        else
          MINOR_NUM=$((MINOR_NUM + 1))
        fi
        NEW_MAJOR=$(printf "%d" $MAJOR_NUM)
        NEW_MINOR=$(printf "%02d" $MINOR_NUM)
        NEW_VERSION="${PREFIX}v${NEW_MAJOR}.${NEW_MINOR}"
        echo "New tag: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "prefix=$PREFIX" >> $GITHUB_ENV
    - name: Create and push new tag
      run: |
        git config user.name "GitHub Action"
        git config user.email "actions@github.com"
        git tag "${{ steps.version.outputs.new_version }}" -m "${{ steps.version.outputs.new_version }}"
        git push origin "${{ steps.version.outputs.new_version }}"
        echo "‚úÖ Pushed new tag: ${{ steps.version.outputs.new_version }}"
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        release_name: Release ${{ steps.version.outputs.new_version }}
        body: |
          ## Changes in ${{ steps.version.outputs.new_version }}
          Auto-generated release from ${{ steps.version.outputs.latest_tag }} to ${{ steps.version.outputs.new_version }}
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.latest_tag }}...${{ steps.version.outputs.new_version }}
        draft: false
        prerelease: false

    - name: Summary
      run: |
        echo "üéâ Release Summary:"
        echo "- Prefix: ${{ env.prefix }}"
        echo "- Previous version: ${{ steps.version.outputs.latest_tag }}"
        echo "- New version: ${{ steps.version.outputs.new_version }}"
        echo "- Release created: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }}"
